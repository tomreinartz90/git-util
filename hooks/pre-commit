#!/bin/bash
# Based on code by Remigijus Jarmalavičius
# Checks the files to be committed for the presence of specific strings
# The array below can be extended for further checks

checks[1]="console.log("
checks[2]="leeuw"

element_count=${#checks[@]}
let "element_count = $element_count + 1"

ROOT_DIR="$(pwd)/"
BRANCH=`git rev-parse --abbrev-ref HEAD`
LIST=$(git status | grep -e '\.*\(modified\|added\)')
ERRORS_BUFFER=""


# Check if the current branch is not master or develop
if [[ "$BRANCH" == "master" || "$BRANCH" == "develop" ]]; then
  ERRORS_BUFFER =  "You cannot commit to branch $BRANCH."
  exit 1
fi

for file in $LIST
do
    if [ "$file" == '#' ]; then
        continue
    fi
    if [ $(echo "$file" | grep 'modified') ]; then
        FILE_ACTION="modified"
    elif [ $(echo "$file" | grep 'added') ]; then
        FILE_ACTION="added"
    else
        EXTENSION=$(echo "$file")
        if [ "$EXTENSION" != "" ]; then

            index=1
            while [ "$index" -lt "$element_count" ]
            do
                echo "Checking $FILE_ACTION file: $file [${checks[$index]}]"
                ERRORS=$(grep "${checks[$index]}" $ROOT_DIR$file >&1)
                if [ "$ERRORS" != "" ]; then
                    if [ "$ERRORS_BUFFER" != "" ]; then
                        ERRORS_BUFFER="$ERRORS_BUFFER\n$ERRORS"
                    else
                        ERRORS_BUFFER="$ERRORS"
                    fi
                    echo "${checks[$index]} found in file: $file "
                fi
                let "index = $index + 1"
            done
        fi
    fi
done
if [ "$ERRORS_BUFFER" != "" ]; then
    echo
    echo "These errors were found in try-to-commit files: "
    echo -e $ERRORS_BUFFER
    echo
    echo "Can't commit, fix errors first."
    exit 1
else
    echo "Commited successfully mate, go ahead and create your pr."
fi
